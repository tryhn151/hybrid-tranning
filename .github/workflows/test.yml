name: PWA Quality Assurance

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Ch·∫°y h√†ng tu·∫ßn v√†o Ch·ªß nh·∫≠t l√∫c 2:00 AM UTC
    - cron: '0 2 * * 0'

jobs:
  lighthouse-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        npm install

    - name: Start local server
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:3000 || exit 1

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:3000
        configPath: '.github/lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: PWA Validation
      run: |
        echo "üîç Ki·ªÉm tra PWA requirements..."
        
        # Ki·ªÉm tra manifest.json
        if curl -s http://localhost:3000/manifest.json | jq . > /dev/null; then
          echo "‚úÖ Manifest.json h·ª£p l·ªá"
        else
          echo "‚ùå Manifest.json kh√¥ng h·ª£p l·ªá"
          exit 1
        fi
        
        # Ki·ªÉm tra Service Worker
        if curl -s http://localhost:3000/sw.js | grep -q "CACHE_NAME"; then
          echo "‚úÖ Service Worker t·ªìn t·∫°i"
        else
          echo "‚ùå Service Worker kh√¥ng t·ªìn t·∫°i"
          exit 1
        fi
        
        # Ki·ªÉm tra icons
        for size in 192 512; do
          if curl -f -s http://localhost:3000/icons/icon-${size}x${size}.png > /dev/null; then
            echo "‚úÖ Icon ${size}x${size} t·ªìn t·∫°i"
          else
            echo "‚ùå Icon ${size}x${size} kh√¥ng t·ªìn t·∫°i"
          fi
        done

    - name: Mobile Performance Test
      run: |
        npx lighthouse http://localhost:3000 \
          --preset=perf \
          --emulated-form-factor=mobile \
          --throttling-method=simulate \
          --output=json \
          --output-path=mobile-performance.json
        
        # Ki·ªÉm tra Performance Score
        PERF_SCORE=$(jq '.categories.performance.score * 100' mobile-performance.json)
        echo "üì± Mobile Performance Score: $PERF_SCORE"
        
        if (( $(echo "$PERF_SCORE >= 80" | bc -l) )); then
          echo "‚úÖ Performance ƒë·∫°t y√™u c·∫ßu (>= 80)"
        else
          echo "‚ö†Ô∏è Performance c·∫ßn c·∫£i thi·ªán (< 80)"
        fi

    - name: Upload Lighthouse Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-reports
        path: |
          lighthouse-report.html
          mobile-performance.json
          lhci_reports/

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Security Scan
      run: |
        echo "üîê Ki·ªÉm tra b·∫£o m·∫≠t c∆° b·∫£n..."
        
        # Ki·ªÉm tra HTTPS trong manifest
        if grep -q '"start_url": "/"' manifest.json; then
          echo "‚úÖ Start URL relative (t·ªët cho HTTPS)"
        fi
        
        # Ki·ªÉm tra meta security tags
        if grep -q 'viewport' index.html; then
          echo "‚úÖ Viewport meta tag c√≥"
        fi
        
        # Ki·ªÉm tra external links
        echo "üîó Ki·ªÉm tra external dependencies:"
        grep -o 'https://[^"]*' index.html | sort | uniq

    - name: Bundle Size Analysis
      run: |
        echo "üì¶ Ph√¢n t√≠ch k√≠ch th∆∞·ªõc bundle..."
        
        TOTAL_SIZE=$(du -sh . | cut -f1)
        HTML_SIZE=$(du -sh index.html | cut -f1)
        
        echo "üìÇ Total size: $TOTAL_SIZE"
        echo "üìÑ HTML size: $HTML_SIZE"
        
        # C·∫£nh b√°o n·∫øu file qu√° l·ªõn
        HTML_BYTES=$(wc -c < index.html)
        if [ $HTML_BYTES -gt 100000 ]; then
          echo "‚ö†Ô∏è HTML file > 100KB, c√¢n nh·∫Øc t·ªëi ∆∞u h√≥a"
        else
          echo "‚úÖ HTML size OK"
        fi 